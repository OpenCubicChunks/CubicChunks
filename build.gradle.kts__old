import com.github.jengelman.gradle.plugins.shadow.ShadowPlugin
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import me.champeau.gradle.JMHPlugin
import net.minecraftforge.gradle.tasks.DeobfuscateJar
import net.minecraftforge.gradle.user.ReobfMappingType
import nl.javadude.gradle.plugins.license.LicensePlugin
import org.gradle.api.internal.HasConvention
import org.spongepowered.asm.gradle.plugins.MixinGradlePlugin

// Gradle repositories and dependencies
buildscript {
    repositories {
        maven {
            setUrl("https://plugins.gradle.org/m2/")
        }
        maven {
            setUrl("https://files.minecraftforge.net/maven")
        }
        mavenCentral()
        maven {
            setUrl("https://repo.spongepowered.org/maven")
        }
    }
    dependencies {
        classpath("org.spongepowered:mixingradle:0.6-SNAPSHOT")
        classpath("com.github.jengelman.gradle.plugins:shadow:2.0.4")
        classpath("gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0")
        classpath("me.champeau.gradle:jmh-gradle-plugin:0.4.6")
        classpath("net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT")
    }
}

plugins {
    base
    java
    idea
    eclipse
    `maven-publish`
    maven
    signing
    id("io.github.opencubicchunks.gradle.fg2fixed")
    id("io.github.opencubicchunks.gradle.mixingen")
    id("io.github.opencubicchunks.gradle.mcGitVersion")
}

apply {
    plugin<ShadowPlugin>()
    plugin<MixinGradlePlugin>()
    plugin<LicensePlugin>()
    plugin<JMHPlugin>()
}

mcGitVersion {
    isSnapshot = true
    setCommitVersion("tags/v0.0", "0.0")
}

// tasks
val build by tasks
val jar: Jar by tasks
val shadowJar: ShadowJar by tasks
val javadoc: Javadoc by tasks
val test: Test by tasks
val processResources: ProcessResources by tasks
val deobfMcSRG: DeobfuscateJar by tasks
val deobfMcMCP: DeobfuscateJar by tasks

defaultTasks = listOf("licenseFormat", "build")
if (gradle.includedBuilds.any { it.name == "CubicChunksAPI" }) {
    tasks["clean"].dependsOn(gradle.includedBuild("CubicChunksAPI").task(":clean"))
    tasks["clean"].mustRunAfter(gradle.includedBuild("CubicChunksAPI").task(":clean"))
}

//it can't be named forgeVersion because ForgeExtension has property named forgeVersion
val theForgeVersion: String by project
val theMappingsVersion: String by project

val licenseYear: String by project
val projectName: String by project

val versionSuffix: String by project
val versionMinorFreeze: String by project
val release: String by project

val sourceSets = the<JavaPluginConvention>().sourceSets
val mainSourceSet = sourceSets["main"]!!

val compileJava: JavaCompile by tasks

publishing {
    repositories {
        maven {
            val user = (project.properties["sonatypeUsername"] ?: System.getenv("sonatypeUsername")) as String?
            val pass = (project.properties["sonatypePassword"] ?: System.getenv("sonatypePassword")) as String?
            val local = user == null || pass == null
            if (local) {
                logger.warn("Username or password not set, publishing to local repository in build/mvnrepo/")
            }
            val localUrl = "$buildDir/mvnrepo"
            val releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            val snapshotsRepoUrl =  "https://oss.sonatype.org/content/repositories/snapshots"

            setUrl(if (local) localUrl else if (release.toBoolean()) releasesRepoUrl else snapshotsRepoUrl)
            if (!local) {
                credentials {
                    username = user
                    password = pass
                }
            }
        }
    }
    (publications) {
        if (System.getProperty("cubicchunks.isStandaloneBuild") == "true") {
            "api"(MavenPublication::class) {
                version = ext["mavenProjectVersion"]!!.toString()
                artifactId = "cubicchunks-api"
                from(components["java"])
                artifacts.clear()
                artifact(tasks["deobfApiSrcJar"]) {
                    classifier = "sources"
                }
                artifact(tasks["apiJar"]) {
                    classifier = ""
                }
                artifact(tasks["javadocApiJar"]) {
                    classifier = "javadoc"
                }
                artifact(tasks["deobfApiJar"]) {
                    classifier = "dev"
                }
                pom {
                    name.set("Cubic Chunks API")
                    description.set("API for the CubicChunks mod for Minecraft")
                    packaging = "jar"
                    url.set("https://github.com/OpenCubicChunks/CubicChunks")
                    description.set("API for CubicChunks mod for Minecraft")
                    scm {
                        connection.set("scm:git:git://github.com/OpenCubicChunks/CubicChunks.git")
                        developerConnection.set("scm:git:ssh://git@github.com:OpenCubicChunks/CubicChunks.git")
                        url.set("https://github.com/OpenCubicChunks/RegionLib")
                    }

                    licenses {
                        license {
                            name.set("The MIT License")
                            url.set("http://www.tldrlegal.com/license/mit-license")
                            distribution.set("repo")
                        }
                    }

                    developers {
                        developer {
                            id.set("Barteks2x")
                            name.set("Barteks2x")
                        }
                        // TODO: add more developers
                    }

                    issueManagement {
                        system.set("github")
                        url.set("https://github.com/OpenCubicChunks/CubicChunks/issues")
                    }
                }
            }
        }
        "mod"(MavenPublication::class) {
            version = ext["mavenProjectVersion"]!!.toString()
            artifactId = "cubicchunks"
            from(components["java"])
            artifacts.clear()
            artifact(deobfSourcesJar) {
                classifier = "sources"
            }
            artifact(shadowJar) {
                classifier = ""
            }
            artifact(devShadowJar) {
                classifier = "dev"
            }
            pom {
                name.set(projectName)
                description.set("Unlimited world height mod for Minecraft")
                packaging = "jar"
                url.set("https://github.com/OpenCubicChunks/CubicChunks")
                scm {
                    connection.set("scm:git:git://github.com/OpenCubicChunks/CubicChunks.git")
                    developerConnection.set("scm:git:ssh://git@github.com:OpenCubicChunks/CubicChunks.git")
                    url.set("https://github.com/OpenCubicChunks/CubicChunks")
                }

                licenses {
                    license {
                        name.set("The MIT License")
                        url.set("http://www.tldrlegal.com/license/mit-license")
                        distribution.set("repo")
                    }
                }

                developers {
                    developer {
                        id.set("Barteks2x")
                        name.set("Barteks2x")
                    }
                    // TODO: add more developers
                }

                issueManagement {
                    system.set("github")
                    url.set("https://github.com/OpenCubicChunks/CubicChunks/issues")
                }
            }
        }
    }
    tasks["publishModPublicationToMavenRepository"].dependsOn("reobfShadowJar")
    tasks["publishModPublicationToMavenRepository"].dependsOn(devShadowJar)
    if (System.getProperty("cubicchunks.isStandaloneBuild") == "true") {
        tasks["publishApiPublicationToMavenRepository"].dependsOn("deobfApiSrcJar", "reobfApiJar", "javadocApiJar", "deobfApiJar")
    }
}

fun extractForgeMinorVersion(): String {
    // version format: MC_VERSION-MAJOR.MINOR.?.BUILD
    return theForgeVersion.split(Regex("-")).getOrNull(1)?.split(Regex("\\."))?.getOrNull(1) ?:
    throw RuntimeException("Invalid forge version format: $theForgeVersion")
}